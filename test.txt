/* 
 Name: recieveTransactionData
 Input: Pointer to Transaction structure
 Output: EN_transState_t Transaction State
 Description: 1. This function will take all transaction data and validate its data.
              2. It checks the account details and amount availability.
              3. If the account does not exist return FRAUD_CARD, if the amount is not available will return DECLINED_INSUFFECIENT_FUND, 
                 if the account is blocked will return DECLINED_STOLEN_CARD, if a transaction can't be saved will 
                 return INTERNAL_SERVER_ERROR and will not save the transaction, else returns APPROVED.
              4. It will update the database with the new balance.
*/
EN_transState_t recieveTransactionData(ST_transaction_t *transData)
{
    /* Define local variable to set the transaction state, Approved */
    EN_transState_t Loc_TransState = APPROVED;
    /* Declare local variable to get all current account data from accountsDB */
    ST_accountsDB_t Loc_CurrentAccount;

    /* Check 1: Account is not found */
    if (isValidAccount(&transData->cardHolderData, &Loc_CurrentAccount) == ACCOUNT_NOT_FOUND)
    {
        /* Save the current Transaction state in the current transaction structure */
        transData->transState = FRAUD_CARD;

        /* Update transaction state, Fraud Card! */
        Loc_TransState = FRAUD_CARD;
    }
    /* Check 2: Account is found */
    else
    {
        /* Check 2.1: Account is blocked */
        if (isBlockedAccount(&Loc_CurrentAccount) == BLOCKED_ACCOUNT)
        {
            /* Save the current Transaction state in the current transaction structure */
            transData->transState = DECLINED_STOLEN_CARD;
            
            /* Update transaction state, Stolen Card! */
            Loc_TransState = DECLINED_STOLEN_CARD;          
        }
        /* Check 2.2: Amount is not available */
        else if (isAmountAvailable(&transData->terminalData, &Loc_CurrentAccount) == LOW_BALANCE)
        {
            /* Save the current Transaction state in the current transaction structure */
            transData->transState = DECLINED_INSUFFECIENT_FUND;

            /* Update transaction state, Stolen Card! */
            Loc_TransState = DECLINED_INSUFFECIENT_FUND;            
        }

        /* Check 2.3: Saving failed */
        if (saveTransaction(transData) == SAVING_FAILED)
        {
            /* Save the current Transaction state in the current transaction structure */
            transData->transState = INTERNAL_SERVER_ERROR;

            /* Update transaction state, Server Error! */
            Loc_TransState = INTERNAL_SERVER_ERROR;
        }
        /* Check 2.4: Saving succeed */
        else
        {
            /* Check 2.4.1: Account is not blocked and Amount is available */
            if (Loc_TransState != DECLINED_STOLEN_CARD && Loc_TransState != DECLINED_INSUFFECIENT_FUND)
            {
                /* Update Account in accountsDB with new balance after transaction approval */
                accountsDB[Glb_AccountsDBIndex].balance -= transData->terminalData.transAmount;
                
                /* Save the current Transaction state in the current transaction structure */
                transData->transState = APPROVED;
            }     
        }
    }